//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace OpenPoseSharp {

public class HandExtractorNet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HandExtractorNet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HandExtractorNet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HandExtractorNet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenPosePINVOKE.delete_HandExtractorNet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void initializationOnThread() {
    OpenPosePINVOKE.HandExtractorNet_initializationOnThread(swigCPtr);
  }

  public virtual void forwardPass(FloatRectangle2ArrayList handRectangles, SWIGTYPE_p_cv__Mat cvInputData) {
    OpenPosePINVOKE.HandExtractorNet_forwardPass(swigCPtr, FloatRectangle2ArrayList.getCPtr(handRectangles), SWIGTYPE_p_cv__Mat.getCPtr(cvInputData));
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatArray2Array getHeatMaps() {
    FloatArray2Array ret = new FloatArray2Array(OpenPosePINVOKE.HandExtractorNet_getHeatMaps(swigCPtr), true);
    return ret;
  }

  public FloatArray2Array getHandKeypoints() {
    FloatArray2Array ret = new FloatArray2Array(OpenPosePINVOKE.HandExtractorNet_getHandKeypoints(swigCPtr), true);
    return ret;
  }

  public bool getEnabled() {
    bool ret = OpenPosePINVOKE.HandExtractorNet_getEnabled(swigCPtr);
    return ret;
  }

  public void setEnabled(bool enabled) {
    OpenPosePINVOKE.HandExtractorNet_setEnabled(swigCPtr, enabled);
  }

}

}
