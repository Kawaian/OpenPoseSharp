//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace OpenPoseSharp {

public class FloatArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FloatArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FloatArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenPosePINVOKE.delete_FloatArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FloatArray(int size) : this(OpenPosePINVOKE.new_FloatArray__SWIG_0(size), true) {
  }

  public FloatArray(IntList sizes) : this(OpenPosePINVOKE.new_FloatArray__SWIG_1(IntList.getCPtr(sizes)), true) {
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatArray() : this(OpenPosePINVOKE.new_FloatArray__SWIG_2(), true) {
  }

  public FloatArray(int size, float value) : this(OpenPosePINVOKE.new_FloatArray__SWIG_3(size, value), true) {
  }

  public FloatArray(IntList sizes, float value) : this(OpenPosePINVOKE.new_FloatArray__SWIG_4(IntList.getCPtr(sizes), value), true) {
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatArray(FloatArray array) : this(OpenPosePINVOKE.new_FloatArray__SWIG_5(FloatArray.getCPtr(array)), true) {
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatArray clone() {
    FloatArray ret = new FloatArray(OpenPosePINVOKE.FloatArray_clone(swigCPtr), true);
    return ret;
  }

  public void reset(int size) {
    OpenPosePINVOKE.FloatArray_reset__SWIG_0(swigCPtr, size);
  }

  public void reset(IntList sizes) {
    OpenPosePINVOKE.FloatArray_reset__SWIG_1(swigCPtr, IntList.getCPtr(sizes));
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    OpenPosePINVOKE.FloatArray_reset__SWIG_2(swigCPtr);
  }

  public void reset(int size, float value) {
    OpenPosePINVOKE.FloatArray_reset__SWIG_3(swigCPtr, size, value);
  }

  public void reset(IntList sizes, float value) {
    OpenPosePINVOKE.FloatArray_reset__SWIG_4(swigCPtr, IntList.getCPtr(sizes), value);
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFrom(SWIGTYPE_p_cv__Mat cvMat) {
    OpenPosePINVOKE.FloatArray_setFrom(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(cvMat));
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTo(float value) {
    OpenPosePINVOKE.FloatArray_setTo(swigCPtr, value);
  }

  public bool empty() {
    bool ret = OpenPosePINVOKE.FloatArray_empty(swigCPtr);
    return ret;
  }

  public IntList getSize() {
    IntList ret = new IntList(OpenPosePINVOKE.FloatArray_getSize__SWIG_0(swigCPtr), true);
    return ret;
  }

  public string printSize() {
    string ret = OpenPosePINVOKE.FloatArray_printSize(swigCPtr);
    return ret;
  }

  public int getSize(int index) {
    int ret = OpenPosePINVOKE.FloatArray_getSize__SWIG_1(swigCPtr, index);
    return ret;
  }

  public uint getNumberDimensions() {
    uint ret = OpenPosePINVOKE.FloatArray_getNumberDimensions(swigCPtr);
    return ret;
  }

  public uint getVolume() {
    uint ret = OpenPosePINVOKE.FloatArray_getVolume__SWIG_0(swigCPtr);
    return ret;
  }

  public uint getVolume(int indexA, int indexB) {
    uint ret = OpenPosePINVOKE.FloatArray_getVolume__SWIG_1(swigCPtr, indexA, indexB);
    return ret;
  }

  public SWIGTYPE_p_float getPtr() {
    global::System.IntPtr cPtr = OpenPosePINVOKE.FloatArray_getPtr(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_float getConstPtr() {
    global::System.IntPtr cPtr = OpenPosePINVOKE.FloatArray_getConstPtr(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_cv__Mat getConstCvMat() {
    SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(OpenPosePINVOKE.FloatArray_getConstCvMat(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_cv__Mat getCvMat() {
    SWIGTYPE_p_cv__Mat ret = new SWIGTYPE_p_cv__Mat(OpenPosePINVOKE.FloatArray_getCvMat(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_float at(int index) {
    SWIGTYPE_p_float ret = new SWIGTYPE_p_float(OpenPosePINVOKE.FloatArray_at__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public SWIGTYPE_p_float at(IntList indexes) {
    SWIGTYPE_p_float ret = new SWIGTYPE_p_float(OpenPosePINVOKE.FloatArray_at__SWIG_2(swigCPtr, IntList.getCPtr(indexes)), false);
    if (OpenPosePINVOKE.SWIGPendingException.Pending) throw OpenPosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string toString() {
    string ret = OpenPosePINVOKE.FloatArray_toString(swigCPtr);
    return ret;
  }

}

}
