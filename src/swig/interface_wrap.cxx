/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OpenPose(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OpenPose(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OpenPose(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <algorithm>
#include <array>
#include <stdexcept>


#include "openpose/core/macros.hpp"
#include "openpose/core/common.hpp"
#include "openpose/core/enumClasses.hpp"
#include "openpose/core/point.hpp"
#include "openpose/core/array.hpp"
#include "openpose/core/rectangle.hpp"

#include "openpose/hand/handExtractorNet.hpp"
#include "openpose/hand/handExtractorCaffe.hpp"

using namespace op;

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< op::HeatMapType > *new_std_vector_Sl_op_HeatMapType_Sg___SWIG_2(int capacity){
        std::vector< op::HeatMapType >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< op::HeatMapType >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN op::HeatMapType std_vector_Sl_op_HeatMapType_Sg__getitemcopy(std::vector< op::HeatMapType > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN op::HeatMapType const &std_vector_Sl_op_HeatMapType_Sg__getitem(std::vector< op::HeatMapType > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__setitem(std::vector< op::HeatMapType > *self,int index,op::HeatMapType const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__AddRange(std::vector< op::HeatMapType > *self,std::vector< op::HeatMapType > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< op::HeatMapType > *std_vector_Sl_op_HeatMapType_Sg__GetRange(std::vector< op::HeatMapType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< op::HeatMapType >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__Insert(std::vector< op::HeatMapType > *self,int index,op::HeatMapType const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__InsertRange(std::vector< op::HeatMapType > *self,int index,std::vector< op::HeatMapType > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__RemoveAt(std::vector< op::HeatMapType > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__RemoveRange(std::vector< op::HeatMapType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< op::HeatMapType > *std_vector_Sl_op_HeatMapType_Sg__Repeat(op::HeatMapType const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< op::HeatMapType >(count, value);
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__Reverse__SWIG_0(std::vector< op::HeatMapType > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__Reverse__SWIG_1(std::vector< op::HeatMapType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_op_HeatMapType_Sg__SetRange(std::vector< op::HeatMapType > *self,int index,std::vector< op::HeatMapType > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN op::Array< float > std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__getitemcopy(std::array< Array< float >,2 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::array< Array< float >,2 >::const_reference std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__getitem(std::array< Array< float >,2 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__setitem(std::array< Array< float >,2 > *self,int index,std::array< Array< float >,2 >::const_reference val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_0(std::array< Array< float >,2 > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_1(std::array< Array< float >,2 > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN op::Rectangle< float > std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__getitemcopy(std::array< Rectangle< float >,2 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::array< Rectangle< float >,2 >::const_reference std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__getitem(std::array< Rectangle< float >,2 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__setitem(std::array< Rectangle< float >,2 > *self,int index,std::array< Rectangle< float >,2 >::const_reference val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_0(std::array< Rectangle< float >,2 > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_1(std::array< Rectangle< float >,2 > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::array< Rectangle< float >,2 > > *new_std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::array< Rectangle< float >,2 > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::array< Rectangle< float >,2 > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::array< op::Rectangle< float >,2 > std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__getitemcopy(std::vector< std::array< Rectangle< float >,2 > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::array< op::Rectangle< float >,2 > const &std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__getitem(std::vector< std::array< Rectangle< float >,2 > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__setitem(std::vector< std::array< Rectangle< float >,2 > > *self,int index,std::array< op::Rectangle< float >,2 > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__AddRange(std::vector< std::array< Rectangle< float >,2 > > *self,std::vector< std::array< op::Rectangle< float >,2 > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::array< op::Rectangle< float >,2 > > *std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__GetRange(std::vector< std::array< Rectangle< float >,2 > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::array< Rectangle< float >,2 > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Insert(std::vector< std::array< Rectangle< float >,2 > > *self,int index,std::array< op::Rectangle< float >,2 > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__InsertRange(std::vector< std::array< Rectangle< float >,2 > > *self,int index,std::vector< std::array< op::Rectangle< float >,2 > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__RemoveAt(std::vector< std::array< Rectangle< float >,2 > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__RemoveRange(std::vector< std::array< Rectangle< float >,2 > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::array< op::Rectangle< float >,2 > > *std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Repeat(std::array< op::Rectangle< float >,2 > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::array< Rectangle< float >,2 > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Reverse__SWIG_0(std::vector< std::array< Rectangle< float >,2 > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Reverse__SWIG_1(std::vector< std::array< Rectangle< float >,2 > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__SetRange(std::vector< std::array< Rectangle< float >,2 > > *self,int index,std::vector< std::array< op::Rectangle< float >,2 > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_OPEN_POSE_NAME_STRING_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &OPEN_POSE_NAME_STRING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_OPEN_POSE_VERSION_STRING_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &OPEN_POSE_VERSION_STRING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_OPEN_POSE_NAME_AND_VERSION_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &OPEN_POSE_NAME_AND_VERSION;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_HandExtractorNet(void * jarg1) {
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_initializationOnThread(void * jarg1) {
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  (arg1)->initializationOnThread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_forwardPass(void * jarg1, void * jarg2, void * jarg3) {
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  std::vector< std::array< op::Rectangle< float >,2 > > arg2 ;
  cv::Mat *arg3 = 0 ;
  std::vector< std::array< op::Rectangle< float >,2 > > const *argp2 ;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  argp2 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::array< op::Rectangle< float >,2 > > const", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (cv::Mat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cv::Mat const & type is null", 0);
    return ;
  } 
  (arg1)->forwardPass(arg2,(cv::Mat const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_getHeatMaps(void * jarg1) {
  void * jresult ;
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  std::array< op::Array< float >,2 > result;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  result = ((op::HandExtractorNet const *)arg1)->getHeatMaps();
  jresult = new std::array< op::Array< float >,2 >((const std::array< op::Array< float >,2 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_getHandKeypoints(void * jarg1) {
  void * jresult ;
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  std::array< op::Array< float >,2 > result;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  result = ((op::HandExtractorNet const *)arg1)->getHandKeypoints();
  jresult = new std::array< op::Array< float >,2 >((const std::array< op::Array< float >,2 > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_getEnabled(void * jarg1) {
  unsigned int jresult ;
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  bool result;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  result = (bool)((op::HandExtractorNet const *)arg1)->getEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorNet_setEnabled(void * jarg1, unsigned int jarg2) {
  op::HandExtractorNet *arg1 = (op::HandExtractorNet *) 0 ;
  bool arg2 ;
  
  arg1 = (op::HandExtractorNet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned short jarg5, float jarg6, void * jarg7, int jarg8, unsigned int jarg9) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  unsigned short arg5 ;
  float arg6 ;
  std::vector< op::HeatMapType > *arg7 = 0 ;
  op::ScaleMode arg8 ;
  bool arg9 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned short)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (std::vector< op::HeatMapType > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return 0;
  } 
  arg8 = (op::ScaleMode)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::vector< op::HeatMapType > const &)*arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned short jarg5, float jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  unsigned short arg5 ;
  float arg6 ;
  std::vector< op::HeatMapType > *arg7 = 0 ;
  op::ScaleMode arg8 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned short)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (std::vector< op::HeatMapType > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return 0;
  } 
  arg8 = (op::ScaleMode)jarg8; 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::vector< op::HeatMapType > const &)*arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_2(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned short jarg5, float jarg6, void * jarg7) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  unsigned short arg5 ;
  float arg6 ;
  std::vector< op::HeatMapType > *arg7 = 0 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned short)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (std::vector< op::HeatMapType > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return 0;
  } 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::vector< op::HeatMapType > const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_3(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned short jarg5, float jarg6) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  unsigned short arg5 ;
  float arg6 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned short)jarg5; 
  arg6 = (float)jarg6; 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_4(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned short jarg5) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  unsigned short arg5 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned short)jarg5; 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HandExtractorCaffe__SWIG_5(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  op::Point< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  op::HandExtractorCaffe *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (op::Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (op::HandExtractorCaffe *)new op::HandExtractorCaffe((op::Point< int > const &)*arg1,(op::Point< int > const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_HandExtractorCaffe(void * jarg1) {
  op::HandExtractorCaffe *arg1 = (op::HandExtractorCaffe *) 0 ;
  
  arg1 = (op::HandExtractorCaffe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorCaffe_netInitializationOnThread(void * jarg1) {
  op::HandExtractorCaffe *arg1 = (op::HandExtractorCaffe *) 0 ;
  
  arg1 = (op::HandExtractorCaffe *)jarg1; 
  (arg1)->netInitializationOnThread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorCaffe_forwardPass(void * jarg1, void * jarg2, void * jarg3) {
  op::HandExtractorCaffe *arg1 = (op::HandExtractorCaffe *) 0 ;
  std::vector< std::array< op::Rectangle< float >,2 > > arg2 ;
  cv::Mat *arg3 = 0 ;
  std::vector< std::array< op::Rectangle< float >,2 > > const *argp2 ;
  
  arg1 = (op::HandExtractorCaffe *)jarg1; 
  argp2 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::array< op::Rectangle< float >,2 > > const", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (cv::Mat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cv::Mat const & type is null", 0);
    return ;
  } 
  (arg1)->forwardPass(arg2,(cv::Mat const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_x_set(void * jarg1, float jarg2) {
  Point< float > *arg1 = (Point< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Point< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_x_get(void * jarg1) {
  float jresult ;
  Point< float > *arg1 = (Point< float > *) 0 ;
  float result;
  
  arg1 = (Point< float > *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_y_set(void * jarg1, float jarg2) {
  Point< float > *arg1 = (Point< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Point< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_y_get(void * jarg1) {
  float jresult ;
  Point< float > *arg1 = (Point< float > *) 0 ;
  float result;
  
  arg1 = (Point< float > *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatPoint__SWIG_0(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Point< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Point< float > *)new Point< float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatPoint__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Point< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Point< float > *)new Point< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatPoint__SWIG_2() {
  void * jresult ;
  Point< float > *result = 0 ;
  
  result = (Point< float > *)new Point< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatPoint__SWIG_3(void * jarg1) {
  void * jresult ;
  op::Point< float > *arg1 = 0 ;
  Point< float > *result = 0 ;
  
  arg1 = (op::Point< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< float > const & type is null", 0);
    return 0;
  } 
  result = (Point< float > *)new Point< float >((op::Point< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_area(void * jarg1) {
  float jresult ;
  Point< float > *arg1 = (Point< float > *) 0 ;
  float result;
  
  arg1 = (Point< float > *)jarg1; 
  result = (float)((Point< float > const *)arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_FloatPoint_toString(void * jarg1) {
  char * jresult ;
  Point< float > *arg1 = (Point< float > *) 0 ;
  std::string result;
  
  arg1 = (Point< float > *)jarg1; 
  result = ((Point< float > const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_FloatPoint(void * jarg1) {
  Point< float > *arg1 = (Point< float > *) 0 ;
  
  arg1 = (Point< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_x_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_x_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_y_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_y_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntPoint__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Point< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Point< int > *)new Point< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntPoint__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Point< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Point< int > *)new Point< int >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntPoint__SWIG_2() {
  void * jresult ;
  Point< int > *result = 0 ;
  
  result = (Point< int > *)new Point< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntPoint__SWIG_3(void * jarg1) {
  void * jresult ;
  op::Point< int > *arg1 = 0 ;
  Point< int > *result = 0 ;
  
  arg1 = (op::Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Point< int > const & type is null", 0);
    return 0;
  } 
  result = (Point< int > *)new Point< int >((op::Point< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_area(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int)((Point< int > const *)arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_IntPoint_toString(void * jarg1) {
  char * jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  std::string result;
  
  arg1 = (Point< int > *)jarg1; 
  result = ((Point< int > const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_IntPoint(void * jarg1) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  
  arg1 = (Point< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_x_set(void * jarg1, float jarg2) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_x_get(void * jarg1) {
  float jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_y_set(void * jarg1, float jarg2) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_y_get(void * jarg1) {
  float jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_width_set(void * jarg1, float jarg2) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_width_get(void * jarg1) {
  float jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_height_set(void * jarg1, float jarg2) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_height_get(void * jarg1) {
  float jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Rectangle< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Rectangle< float > *)new Rectangle< float >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Rectangle< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Rectangle< float > *)new Rectangle< float >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Rectangle< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Rectangle< float > *)new Rectangle< float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  Rectangle< float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Rectangle< float > *)new Rectangle< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_4() {
  void * jresult ;
  Rectangle< float > *result = 0 ;
  
  result = (Rectangle< float > *)new Rectangle< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_Rectangle__SWIG_5(void * jarg1) {
  void * jresult ;
  op::Rectangle< float > *arg1 = 0 ;
  Rectangle< float > *result = 0 ;
  
  arg1 = (op::Rectangle< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Rectangle< float > const & type is null", 0);
    return 0;
  } 
  result = (Rectangle< float > *)new Rectangle< float >((op::Rectangle< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_center(void * jarg1) {
  void * jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  op::Point< float > result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = ((Rectangle< float > const *)arg1)->center();
  jresult = new op::Point< float >((const op::Point< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_topLeft(void * jarg1) {
  void * jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  op::Point< float > result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = ((Rectangle< float > const *)arg1)->topLeft();
  jresult = new op::Point< float >((const op::Point< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_bottomRight(void * jarg1) {
  void * jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  op::Point< float > result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = ((Rectangle< float > const *)arg1)->bottomRight();
  jresult = new op::Point< float >((const op::Point< float > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_area(void * jarg1) {
  float jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = (float)((Rectangle< float > const *)arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_recenter(void * jarg1, float jarg2, float jarg3) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->recenter(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_Rectangle_toString(void * jarg1) {
  char * jresult ;
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  std::string result;
  
  arg1 = (Rectangle< float > *)jarg1; 
  result = ((Rectangle< float > const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_Rectangle(void * jarg1) {
  Rectangle< float > *arg1 = (Rectangle< float > *) 0 ;
  
  arg1 = (Rectangle< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_IntList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_IntList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntList__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_IntList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_IntList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_IntList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_IntList_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_IntList(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Clear(void * jarg1) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Add(void * jarg1, int jarg2) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  op::HeatMapType *arg2 = 0 ;
  op::HeatMapType temp2 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  temp2 = (op::HeatMapType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((op::HeatMapType const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  std::vector< enum op::HeatMapType >::size_type result;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  result = ((std::vector< op::HeatMapType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  std::vector< enum op::HeatMapType >::size_type result;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  result = ((std::vector< op::HeatMapType > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  std::vector< enum op::HeatMapType >::size_type arg2 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (std::vector< enum op::HeatMapType >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HeatMapTypeList__SWIG_0() {
  void * jresult ;
  std::vector< op::HeatMapType > *result = 0 ;
  
  result = (std::vector< op::HeatMapType > *)new std::vector< op::HeatMapType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HeatMapTypeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< op::HeatMapType > *arg1 = 0 ;
  std::vector< op::HeatMapType > *result = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< op::HeatMapType > *)new std::vector< op::HeatMapType >((std::vector< op::HeatMapType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_HeatMapTypeList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< op::HeatMapType > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< op::HeatMapType > *)new_std_vector_Sl_op_HeatMapType_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  op::HeatMapType result;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (op::HeatMapType)std_vector_Sl_op_HeatMapType_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  op::HeatMapType *result = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (op::HeatMapType *) &std_vector_Sl_op_HeatMapType_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  op::HeatMapType *arg3 = 0 ;
  op::HeatMapType temp3 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (op::HeatMapType)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_op_HeatMapType_Sg__setitem(arg1,arg2,(enum op::HeatMapType const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_AddRange(void * jarg1, void * jarg2) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  std::vector< op::HeatMapType > *arg2 = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (std::vector< op::HeatMapType > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_op_HeatMapType_Sg__AddRange(arg1,(std::vector< enum op::HeatMapType > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< op::HeatMapType > *result = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< op::HeatMapType > *)std_vector_Sl_op_HeatMapType_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  op::HeatMapType *arg3 = 0 ;
  op::HeatMapType temp3 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (op::HeatMapType)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_op_HeatMapType_Sg__Insert(arg1,arg2,(enum op::HeatMapType const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  std::vector< op::HeatMapType > *arg3 = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< op::HeatMapType > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_op_HeatMapType_Sg__InsertRange(arg1,arg2,(std::vector< enum op::HeatMapType > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_op_HeatMapType_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_op_HeatMapType_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  op::HeatMapType *arg1 = 0 ;
  int arg2 ;
  op::HeatMapType temp1 ;
  std::vector< op::HeatMapType > *result = 0 ;
  
  temp1 = (op::HeatMapType)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< op::HeatMapType > *)std_vector_Sl_op_HeatMapType_Sg__Repeat((enum op::HeatMapType const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Reverse__SWIG_0(void * jarg1) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  std_vector_Sl_op_HeatMapType_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_op_HeatMapType_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_HeatMapTypeList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  int arg2 ;
  std::vector< op::HeatMapType > *arg3 = 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< op::HeatMapType > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< op::HeatMapType > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_op_HeatMapType_Sg__SetRange(arg1,arg2,(std::vector< enum op::HeatMapType > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_HeatMapTypeList(void * jarg1) {
  std::vector< op::HeatMapType > *arg1 = (std::vector< op::HeatMapType > *) 0 ;
  
  arg1 = (std::vector< op::HeatMapType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Array< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Array< float > *)new Array< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  Array< float > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (Array< float > *)new Array< float >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_2() {
  void * jresult ;
  Array< float > *result = 0 ;
  
  result = (Array< float > *)new Array< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_3(int jarg1, float jarg2) {
  void * jresult ;
  int arg1 ;
  float arg2 ;
  Array< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (Array< float > *)new Array< float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_4(void * jarg1, float jarg2) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  float arg2 ;
  Array< float > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (Array< float > *)new Array< float >((std::vector< int > const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray__SWIG_5(void * jarg1) {
  void * jresult ;
  op::Array< float > *arg1 = 0 ;
  Array< float > *result = 0 ;
  
  arg1 = (op::Array< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "op::Array< float > const & type is null", 0);
    return 0;
  } 
  result = (Array< float > *)new Array< float >((op::Array< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_clone(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  op::Array< float > result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->clone();
  jresult = new op::Array< float >((const op::Array< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_reset__SWIG_0(void * jarg1, int jarg2) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  int arg2 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_reset__SWIG_1(void * jarg1, void * jarg2) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->reset((std::vector< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_reset__SWIG_2(void * jarg1) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_reset__SWIG_3(void * jarg1, int jarg2, float jarg3) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->reset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_reset__SWIG_4(void * jarg1, void * jarg2, float jarg3) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->reset((std::vector< int > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_setFrom(void * jarg1, void * jarg2) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (cv::Mat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cv::Mat const & type is null", 0);
    return ;
  } 
  (arg1)->setFrom((cv::Mat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_setTo(void * jarg1, float jarg2) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  float arg2 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setTo(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_empty(void * jarg1) {
  unsigned int jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  bool result;
  
  arg1 = (Array< float > *)jarg1; 
  result = (bool)((Array< float > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getSize__SWIG_0(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< int > result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->getSize();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_printSize(void * jarg1) {
  char * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::string result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->printSize();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getSize__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Array< float > const *)arg1)->getSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getNumberDimensions(void * jarg1) {
  unsigned long jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->getNumberDimensions();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getVolume__SWIG_0(void * jarg1) {
  unsigned long jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  size_t result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->getVolume();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getVolume__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned long jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  size_t result;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((Array< float > const *)arg1)->getVolume(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getPtr(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  result = (float *)(arg1)->getPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getConstPtr(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  float *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  result = (float *)((Array< float > const *)arg1)->getConstPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getConstCvMat(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  cv::Mat *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  result = (cv::Mat *) &((Array< float > const *)arg1)->getConstCvMat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_getCvMat(void * jarg1) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  cv::Mat *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  result = (cv::Mat *) &(arg1)->getCvMat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float *) &(arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_at__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  float *result = 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (float *) &(arg1)->at((std::vector< int > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray_toString(void * jarg1) {
  char * jresult ;
  Array< float > *arg1 = (Array< float > *) 0 ;
  std::string result;
  
  arg1 = (Array< float > *)jarg1; 
  result = ((Array< float > const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_FloatArray(void * jarg1) {
  Array< float > *arg1 = (Array< float > *) 0 ;
  
  arg1 = (Array< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray2Array__SWIG_0() {
  void * jresult ;
  std::array< Array< float >,2 > *result = 0 ;
  
  result = (std::array< Array< float >,2 > *)new std::array< Array< float >,2 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatArray2Array__SWIG_1(void * jarg1) {
  void * jresult ;
  std::array< op::Array< float >,2 > *arg1 = 0 ;
  std::array< Array< float >,2 > *result = 0 ;
  
  arg1 = (std::array< op::Array< float >,2 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Array< float >,2 > const & type is null", 0);
    return 0;
  } 
  result = (std::array< Array< float >,2 > *)new std::array< Array< float >,2 >((std::array< op::Array< float >,2 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_size(void * jarg1) {
  unsigned long jresult ;
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  std::array< Array< float >,2 >::size_type result;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  result = ((std::array< Array< float >,2 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_empty(void * jarg1) {
  unsigned int jresult ;
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  bool result;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  result = (bool)((std::array< Array< float >,2 > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_Fill(void * jarg1, void * jarg2) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  std::array< Array< float >,2 >::value_type *arg2 = 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (std::array< Array< float >,2 >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Array< float >,2 >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->fill((std::array< Array< float >,2 >::value_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_Swap(void * jarg1, void * jarg2) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  std::array< op::Array< float >,2 > *arg2 = 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (std::array< op::Array< float >,2 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Array< float >,2 > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  int arg2 ;
  op::Array< float > result;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new op::Array< float >((const op::Array< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  int arg2 ;
  std::array< op::Array< float >,2 >::value_type *result = 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< op::Array< float >,2 >::value_type *) &std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  int arg2 ;
  std::array< op::Array< float >,2 >::value_type *arg3 = 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::array< op::Array< float >,2 >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Array< float >,2 >::const_reference type is null", 0);
    return ;
  } 
  try {
    std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__setitem(arg1,arg2,(Array< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_Reverse__SWIG_0(void * jarg1) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatArray2Array_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_array_Sl_Array_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_FloatArray2Array(void * jarg1) {
  std::array< Array< float >,2 > *arg1 = (std::array< Array< float >,2 > *) 0 ;
  
  arg1 = (std::array< Array< float >,2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatRectangle2Array__SWIG_0() {
  void * jresult ;
  std::array< Rectangle< float >,2 > *result = 0 ;
  
  result = (std::array< Rectangle< float >,2 > *)new std::array< Rectangle< float >,2 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatRectangle2Array__SWIG_1(void * jarg1) {
  void * jresult ;
  std::array< op::Rectangle< float >,2 > *arg1 = 0 ;
  std::array< Rectangle< float >,2 > *result = 0 ;
  
  arg1 = (std::array< op::Rectangle< float >,2 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > const & type is null", 0);
    return 0;
  } 
  result = (std::array< Rectangle< float >,2 > *)new std::array< Rectangle< float >,2 >((std::array< op::Rectangle< float >,2 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_size(void * jarg1) {
  unsigned long jresult ;
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  std::array< Rectangle< float >,2 >::size_type result;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  result = ((std::array< Rectangle< float >,2 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_empty(void * jarg1) {
  unsigned int jresult ;
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  bool result;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  result = (bool)((std::array< Rectangle< float >,2 > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_Fill(void * jarg1, void * jarg2) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  std::array< Rectangle< float >,2 >::value_type *arg2 = 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (std::array< Rectangle< float >,2 >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Rectangle< float >,2 >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->fill((std::array< Rectangle< float >,2 >::value_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_Swap(void * jarg1, void * jarg2) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  std::array< op::Rectangle< float >,2 > *arg2 = 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (std::array< op::Rectangle< float >,2 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  int arg2 ;
  op::Rectangle< float > result;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new op::Rectangle< float >((const op::Rectangle< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 >::value_type *result = 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< op::Rectangle< float >,2 >::value_type *) &std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 >::value_type *arg3 = 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::array< op::Rectangle< float >,2 >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Rectangle< float >,2 >::const_reference type is null", 0);
    return ;
  } 
  try {
    std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__setitem(arg1,arg2,(Rectangle< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_Reverse__SWIG_0(void * jarg1) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2Array_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_FloatRectangle2Array(void * jarg1) {
  std::array< Rectangle< float >,2 > *arg1 = (std::array< Rectangle< float >,2 > *) 0 ;
  
  arg1 = (std::array< Rectangle< float >,2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Clear(void * jarg1) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Add(void * jarg1, void * jarg2) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  std::array< op::Rectangle< float >,2 > *arg2 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (std::array< op::Rectangle< float >,2 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::array< op::Rectangle< float >,2 > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  std::vector< std::array< Rectangle< float >,2 > >::size_type result;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  result = ((std::vector< std::array< Rectangle< float >,2 > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  std::vector< std::array< Rectangle< float >,2 > >::size_type result;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  result = ((std::vector< std::array< Rectangle< float >,2 > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  std::vector< std::array< Rectangle< float >,2 > >::size_type arg2 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (std::vector< std::array< Rectangle< float >,2 > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatRectangle2ArrayList__SWIG_0() {
  void * jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *result = 0 ;
  
  result = (std::vector< std::array< Rectangle< float >,2 > > *)new std::vector< std::array< Rectangle< float >,2 > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatRectangle2ArrayList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::array< op::Rectangle< float >,2 > > *arg1 = 0 ;
  std::vector< std::array< Rectangle< float >,2 > > *result = 0 ;
  
  arg1 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::array< op::Rectangle< float >,2 > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::array< Rectangle< float >,2 > > *)new std::vector< std::array< Rectangle< float >,2 > >((std::vector< std::array< op::Rectangle< float >,2 > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_new_FloatRectangle2ArrayList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::array< Rectangle< float >,2 > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::array< Rectangle< float >,2 > > *)new_std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 > result;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::array< op::Rectangle< float >,2 >((const std::array< op::Rectangle< float >,2 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 > *result = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< op::Rectangle< float >,2 > *) &std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 > *arg3 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::array< op::Rectangle< float >,2 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__setitem(arg1,arg2,(std::array< Rectangle< float >,2 > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  std::vector< std::array< op::Rectangle< float >,2 > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::array< op::Rectangle< float >,2 > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__AddRange(arg1,(std::vector< std::array< Rectangle< float >,2 > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::array< op::Rectangle< float >,2 > > *result = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::array< op::Rectangle< float >,2 > > *)std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::array< op::Rectangle< float >,2 > *arg3 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::array< op::Rectangle< float >,2 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Insert(arg1,arg2,(std::array< Rectangle< float >,2 > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::vector< std::array< op::Rectangle< float >,2 > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::array< op::Rectangle< float >,2 > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::array< Rectangle< float >,2 > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< op::Rectangle< float >,2 > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::array< op::Rectangle< float >,2 > > *result = 0 ;
  
  arg1 = (std::array< op::Rectangle< float >,2 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< op::Rectangle< float >,2 > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::array< op::Rectangle< float >,2 > > *)std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Repeat((std::array< Rectangle< float >,2 > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_FloatRectangle2ArrayList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  int arg2 ;
  std::vector< std::array< op::Rectangle< float >,2 > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::array< op::Rectangle< float >,2 > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::array< op::Rectangle< float >,2 > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_array_Sl_Rectangle_Sl_float_Sg__Sc_2_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::array< Rectangle< float >,2 > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPoseSharp_delete_FloatRectangle2ArrayList(void * jarg1) {
  std::vector< std::array< Rectangle< float >,2 > > *arg1 = (std::vector< std::array< Rectangle< float >,2 > > *) 0 ;
  
  arg1 = (std::vector< std::array< Rectangle< float >,2 > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT op::HandExtractorNet * SWIGSTDCALL CSharp_OpenPoseSharp_HandExtractorCaffe_SWIGUpcast(op::HandExtractorCaffe *jarg1) {
    return (op::HandExtractorNet *)jarg1;
}

#ifdef __cplusplus
}
#endif

